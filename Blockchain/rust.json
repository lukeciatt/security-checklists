{
  "title": "Rust Security Checklist",
  "description": "Rust Security Checklist for blockchain and smart contract development",
  "categories": [
    {
      "id": 1,
      "category": "Access Control and Visibility",
      "description": "Visibility specifiers and authorization for privileged actions",
      "items": [
        { "id": "1.1", "item": "Explicitly set visibility for all public-facing functions and modules", "severity": "High" },
        { "id": "1.2", "item": "Enforce role-based access control for privileged operations", "severity": "High" }
      ]
    },
    {
      "id": 2,
      "category": "Compiler and Language Settings",
      "description": "Safe compiler versions and deterministic builds",
      "items": [
        { "id": "2.1", "item": "Use a recent, patched Rust toolchain for building smart contracts", "severity": "Medium" },
        { "id": "2.2", "item": "Avoid deprecated Rust features or unstable APIs in production", "severity": "Medium" }
      ]
    },
    {
      "id": 3,
      "category": "Error Handling and Assertions",
      "description": "Defensive checks and safe failure semantics",
      "items": [
        { "id": "3.1", "item": "Avoid reaching failing assertions; validate inputs and invariants", "severity": "High" },
        { "id": "3.2", "item": "Check the return value of all fallible calls and propagate errors safely", "severity": "High" }
      ]
    },
    {
      "id": 4,
      "category": "External Calls and Interactions",
      "description": "Safe patterns for calling other contracts and handling results",
      "items": [
        { "id": "4.1", "item": "Call only trusted addresses/contracts and validate interfaces", "severity": "High" }
      ]
    },
    {
      "id": 5,
      "category": "Denial of Service and Concurrency",
      "description": "Prevent blocking conditions and order-dependent behavior",
      "items": [
        { "id": "5.1", "item": "Design to avoid DoS via unbounded work or state-dependent blocking", "severity": "High" },
        { "id": "5.2", "item": "Eliminate race conditions and transaction-order dependence (TOD)", "severity": "High" }
      ]
    },
    {
      "id": 6,
      "category": "Time and Randomness",
      "description": "Safe handling of time and unpredictability",
      "items": [
        { "id": "6.1", "item": "Do not use block values as time; rely on secure time sources where applicable", "severity": "Medium" },
        { "id": "6.2", "item": "Do not derive randomness from chain attributes; use secure randomness sources", "severity": "High" }
      ]
    },
    {
      "id": 7,
      "category": "State Integrity and Accounting",
      "description": "Conservation of value and correct accounting",
      "items": [
        { "id": "7.1", "item": "Protect user funds; require proper authorization for transfers", "severity": "High" },
        { "id": "7.2", "item": "Prevent unauthorized manipulation of user balances", "severity": "High" },
        { "id": "7.3", "item": "Maintain data consistency across storage and events", "severity": "High" }
      ]
    },
    {
      "id": 8,
      "category": "Market Manipulation and Oracles",
      "description": "Trusted price/data sources and resistance to manipulation",
      "items": [
        { "id": "8.1", "item": "Defend against flash-loan price manipulation (e.g., use TWAP/trusted oracles)", "severity": "High" }
      ]
    },
    {
      "id": 9,
      "category": "Gas and Performance",
      "description": "Bounded execution and efficiency",
      "items": [
        { "id": "9.1", "item": "Avoid unbounded loops and patterns that risk exceeding execution limits", "severity": "Medium" }
      ]
    },
    {
      "id": 10,
      "category": "Standards and Compliance",
      "description": "Protocol standards and requirement adherence",
      "items": [
        { "id": "10.1", "item": "Ensure implementation matches documented and customer requirements", "severity": "Medium" }
      ]
    },
    {
      "id": 11,
      "category": "Style and Dependencies",
      "description": "Readable code and stable dependencies",
      "items": [
        { "id": "11.1", "item": "Follow established style guides and best practices", "severity": "Optional" },
        { "id": "11.2", "item": "Use stable, vetted dependencies; avoid experimental/draft interfaces", "severity": "Medium" }
      ]
    },
    {
      "id": 12,
      "category": "Environment and Testing",
      "description": "Reproducible development and comprehensive tests",
      "items": [
        { "id": "12.1", "item": "Provide a reproducible build/deploy environment with clear documentation", "severity": "Medium" },
        { "id": "12.2", "item": "Ensure extensive unit/integration tests including negative and multi-user scenarios", "severity": "Medium" }
      ]
    },
    {
      "id": 13,
      "category": "Unsafe Code and Memory Safety",
      "description": "Avoid undefined behavior and memory corruption in unsafe Rust",
      "items": [
        { "id": "13.1", "item": "Avoid unsafe Rust; if unavoidable, prove memory safety and audit carefully", "severity": "High" }
      ]
    }
  ]
}
