{
  "title": "Cosmos SDK Security Checklist",
  "description": "Security considerations for developing applications on the Cosmos SDK blockchain framework",
  "categories": [
    {
      "id": 1,
      "category": "General Blockchain Application Considerations",
      "description": "Common blockchain issues applicable to Cosmos-based applications",
      "items": [
        {
          "id": "1.1",
          "item": "Ensure transaction-processing logic is deterministic across nodes.",
          "severity": "High"
        },
        {
          "id": "1.2",
          "item": "Avoid introducing non-determinism in consensus-critical code.",
          "severity": "High"
        },
        {
          "id": "1.3",
          "item": "Replace panics with explicit error handling and logging.",
          "severity": "High"
        },
        {
          "id": "1.4",
          "item": "Review for hidden panics from library calls (e.g., unwrap/expect, divide-by-zero, out-of-range indexing).",
          "severity": "High"
        },
        {
          "id": "1.5",
          "item": "Check and handle every returned error; do not suppress failures.",
          "severity": "High"
        }
      ]
    },
    {
      "id": 2,
      "category": "Cosmos Protocol/SDK-Specific Considerations",
      "description": "ABCI/consensus flow and state-management requirements",
      "items": [
        {
          "id": "2.1",
          "item": "Prevent panics in ABCI methods (CheckTx, DeliverTx, BeginBlock, EndBlock, Commit, Query, PrepareProposal, ProcessProposal, ExtendVote, VerifyVoteExtension).",
          "severity": "High"
        },
        {
          "id": "2.2",
          "item": "Keep BeginBlocker and EndBlocker handlers deterministic and bounded; gas does not constrain them.",
          "severity": "High"
        },
        {
          "id": "2.3",
          "item": "Design the CheckTx handler to be lightweight; avoid expensive checks and implement replay protection in CheckTx.",
          "severity": "High"
        },
        {
          "id": "2.4",
          "item": "For queries marked module_query_safe, ensure determinism and track gas for high-computation queries.",
          "severity": "High"
        },
        {
          "id": "2.5",
          "item": "Enforce gas limits in consensus: reject over-gas transactions in the DeliverTx handler (≤ v0.34) and ensure proposed blocks respect MaxGas with PrepareProposal/ProcessProposal handlers (≥ v0.37).",
          "severity": "High"
        },
        {
          "id": "2.6",
          "item": "In the PrepareProposal handler, enforce MaxBytes and any block gas limits; only the proposer executes it and it may be non-deterministic.",
          "severity": "High"
        },
        {
          "id": "2.7",
          "item": "In the ProcessProposal handler, perform deterministic validation without mutating state; generally accept valid proposals.",
          "severity": "High"
        },
        {
          "id": "2.8",
          "item": "For the first block after InitChain (block height 1), propose an empty block when the gas meter is not reset to prevent app_hash mismatch.",
          "severity": "High"
        },
        {
          "id": "2.9",
          "item": "Complete the PrepareProposal handler within TimeoutPropose to prevent nil prevotes and liveness loss.",
          "severity": "High"
        },
        {
          "id": "2.10",
          "item": "Restrict state mutations to the FinalizeBlock handler and persist in the Commit handler; track the last successfully committed height for recovery.",
          "severity": "High"
        },
        {
          "id": "2.11",
          "item": "Avoid broadcast_tx calls from the Commit handler to prevent deadlocks on mempool locks.",
          "severity": "High"
        }
      ]
    },
    {
      "id": 3,
      "category": "Module Security",
      "description": "Security considerations for Cosmos SDK modules",
      "items": [
        {
          "id": "3.1",
          "item": "Ensure ante handler chain cannot be bypassed for fee payment or gas enforcement.",
          "severity": "High"
        },
        {
          "id": "3.2",
          "item": "Recursively inspect nested messages in the ante handlers (e.g., x/authz) to apply gas and fee rules to all inner messages.",
          "severity": "High"
        },
        {
          "id": "3.3",
          "item": "Prevent bypass of Ethermint or custom ante handler logic that allows gas limit violations or incorrect fee deductions.",
          "severity": "High"
        },
        {
          "id": "3.4",
          "item": "Register module errors with a unique codespace and codes greater than 1.",
          "severity": "Medium"
        },
        {
          "id": "3.5",
          "item": "Configure the x/bank module's blocklist to prevent users from directly sending tokens to module account addresses (e.g., staking, distribution module accounts) which could break module invariants.",
          "severity": "High"
        },
        {
          "id": "3.6",
          "item": "Avoid bulk SendCoins that mask per-transfer failures; transfer per coin and verify each outcome, especially in Begin/EndBlock.",
          "severity": "High"
        },
        {
          "id": "3.7",
          "item": "Ensure vesting account handling does not allow chain halts.",
          "severity": "High"
        }
      ]
    },
    {
      "id": 4,
      "category": "Staking and IBC",
      "description": "Security considerations for staking module and Inter-Blockchain Communication",
      "items": [
        {
          "id": "4.1",
          "item": "Validate MsgCreateValidator fields: unique operator address and consensus pubkey, correct bonding denom, valid commission parameters, and bounded description sizes.",
          "severity": "High"
        },
        {
          "id": "4.2",
          "item": "Mitigate misuse of another validator’s consensus public key and front-running during validator creation.",
          "severity": "High"
        },
        {
          "id": "4.3",
          "item": "Inter-Blockchain Communication (IBC): Always verify source of IBC packets and validate message data before acting on it.",
          "severity": "High"
        },
        {
          "id": "4.4",
          "item": "Validate IBC packet contents to prevent spoofing, event hallucinations, or reentrancy-style issues before acting on them.",
          "severity": "High"
        }
      ]
    },
    {
      "id": 5,
      "category": "Vote Extensions (ABCI++)",
      "description": "Security considerations for vote extensions in ABCI++",
      "items": [
        {
          "id": "5.1",
          "item": "Keep ExtendVote handler data out of consensus-critical state and validate before use.",
          "severity": "High"
        },
        {
          "id": "5.2",
          "item": "Implement the VerifyVoteExtension handler deterministically with no side effects; accept invalid extensions and ignore them in application logic.",
          "severity": "High"
        },
        {
          "id": "5.3",
          "item": "Filter invalid vote extensions when building proposals in the PrepareProposal handler, including those added after the +2/3 threshold.",
          "severity": "High"
        },
        {
          "id": "5.4",
          "item": "Control vote extension sizes to limit added latency during block production.",
          "severity": "Medium"
        }
      ]
    },
    {
      "id": 6,
      "category": "Miscellaneous (Latest Versions)",
      "description": "Additional security considerations for latest Cosmos SDK versions",
      "items": [
        {
          "id": "6.1",
          "item": "In Cosmos SDK v0.52+, avoid sdk.Context for consensus params; use the consensus module via appmodule.Environment.",
          "severity": "Medium"
        },
        {
          "id": "6.2",
          "item": "Reduce BlockParams.MaxBytes from the 21 MB default if unnecessary to limit bandwidth and latency impacts.",
          "severity": "Medium"
        },
        {
          "id": "6.3",
          "item": "When updating consensus parameters, set all related fields explicitly to avoid unintended defaults.",
          "severity": "High"
        },
        {
          "id": "6.4",
          "item": "Validate secp256k1 public keys and signatures, including compressed formats (0x02/0x03 prefixes), and reject incompatible keys.",
          "severity": "High"
        },
        {
          "id": "6.5",
          "item": "Account for multiple messages per transaction and ensure ante handlers process all embedded messages to enforce gas and fee rules.",
          "severity": "High"
        }
      ]
    }
  ]
}
