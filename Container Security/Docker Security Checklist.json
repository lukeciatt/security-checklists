{
  "title": "Docker Security Best Practices",
  "description": "A comprehensive security checklist for Docker based on OWASP best practices.",
  "categories": [
    {
      "id": 1,
      "category": "Host and Engine Security",
      "description": "Ensure Docker host OS and Docker Engine are securely configured and regularly updated.",
      "items": [
        { "id": "1.1", "item": "Run Docker in rootless mode to minimize privilege escalation risks", "severity": "High" },
        { "id": "1.2", "item": "Limit host exposure by disabling unused services and closing unused network ports", "severity": "Medium" },
        { "id": "1.3", "item": "Configure log level at 'info' for Docker daemon logs to monitor suspicious activity", "severity": "Medium" },
        { "id": "1.4", "item": "Avoid exposing the Docker daemon socket to containers or networks", "severity": "High" },
        { "id": "1.5", "item": "Keep host OS and Docker Engine up to date to mitigate known vulnerabilities", "severity": "High" }
      ]
    },
    {
      "id": 2,
      "category": "Image Security and Supply Chain",
      "description": "Best practices around container image use, provenance, and supply chain controls.",
      "items": [
        { "id": "2.1", "item": "Use trusted, official images as base images and avoid unverified sources", "severity": "High" },
        { "id": "2.2", "item": "Scan Docker images for vulnerabilities using tools like Trivy or Snyk", "severity": "High" },
        { "id": "2.3", "item": "Pin image versions/tags to avoid unexpected changes and vulnerabilities", "severity": "Medium" },
        { "id": "2.4", "item": "Generate SBOMs for all images to track software components", "severity": "Medium" }
      ]
    },
    {
      "id": 3,
      "category": "Container User and Process Security",
      "description": "Restrict privileges and capabilities within containers and enforce least privilege.",
      "items": [
        { "id": "3.1", "item": "Use seccomp, AppArmor, or SELinux profiles to constrain container actions", "severity": "High" },
        { "id": "3.2", "item": "Forbid new privileges using --security-opt=no-new-privileges", "severity": "High" },
        { "id": "3.3", "item": "Never run containers as root; set a non-root user in Dockerfile or at runtime", "severity": "High" },
        { "id": "3.4", "item": "Limit Linux capabilities to the bare minimum required for container workloads", "severity": "High" }
      ]
    },
    {
      "id": 4,
      "category": "Filesystem, Storage and Resource Controls",
      "description": "Harden access to storage, volumes, and implement strict resource limits.",
      "items": [
        { "id": "4.1", "item": "Limit access to sensitive host directories and avoid sharing host devices unnecessarily", "severity": "High" },
        { "id": "4.2", "item": "Run containers with a read-only root filesystem where possible", "severity": "High" },
        { "id": "4.3", "item": "Use --tmpfs for temporary files instead of writable filesystems", "severity": "Medium" },
        { "id": "4.4", "item": "Mount volumes and filesystems as read-only when write access isn’t required", "severity": "Medium" }
      ]
    },
    {
      "id": 5,
      "category": "Network and Connectivity Controls",
      "description": "Segregate container networking, restrict communication, and harden access.",
      "items": [
        { "id": "5.1", "item": "Disallow the use of Docker’s default docker0 bridge for multi-container deployments", "severity": "Medium" },
        { "id": "5.2", "item": "Use network policies to restrict inter-container and external communication", "severity": "High" },
        { "id": "5.3", "item": "Isolate containers that do not require network access (set --network=none)", "severity": "Medium" },
        { "id": "5.4", "item": "Use custom Docker networks to control container interconnectivity", "severity": "High" },
        { "id": "5.5", "item": "Avoid exposing unnecessary ports and restrict socket access", "severity": "High" }
      ]
    },
    {
      "id": 6,
      "category": "Secrets Management and Sensitive Data Handling",
      "description": "Protect secrets and sensitive data within images, containers, and at runtime.",
      "items": [
        { "id": "6.1", "item": "Leverage Docker Secrets or external secret managers to manage credentials", "severity": "High" },
        { "id": "6.2", "item": "Restrict access to environment variables containing sensitive data", "severity": "Medium" },
        { "id": "6.3", "item": "Do not store secrets in images, Dockerfiles, or ENV directives", "severity": "High" },
        { "id": "6.4", "item": "Scan images and containers for embedded secrets using secret scanning tools", "severity": "High" },
        { "id": "6.5", "item": "Use multi-stage builds to prevent build-time secrets from leaking into the final image", "severity": "Medium" }
      ]
    },
    {
      "id": 7,
      "category": "Monitoring, Logging, and Auditing",
      "description": "Enable comprehensive monitoring, logging, and regular security audits.",
      "items": [
        { "id": "7.1", "item": "Set up logging drivers and aggregate container logs securely", "severity": "Medium" },
        { "id": "7.2", "item": "Monitor container runtime behavior with security monitoring tools", "severity": "High" },
        { "id": "7.3", "item": "Alert on suspicious behavior, such as privilege escalation or abnormal network use", "severity": "High" },
        { "id": "7.4", "item": "Integrate container scanning in CI/CD pipelines for early detection", "severity": "High" },
        { "id": "7.5", "item": "Conduct regular audits for misconfigurations, vulnerabilities, and compliance", "severity": "Medium" }
      ]
    },
    {
      "id": 8,
      "category": "Supply Chain and CI/CD Integration",
      "description": "Secure supply chain workflows, CI/CD integration, and lifecycle management.",
      "items": [
        { "id": "8.1", "item": "Regularly rotate credentials and remove unused secrets from CI/CD systems", "severity": "Medium" },
        { "id": "8.2", "item": "Ensure image provenance and verify sources for all container artifacts", "severity": "High" },
        { "id": "8.3", "item": "Pin software versions in Dockerfile for reproducibility and transparency", "severity": "Medium" },
        { "id": "8.4", "item": "Enable image signing, attestation, and policy enforcement for deployments", "severity": "High" },
        { "id": "8.5", "item": "Integrate container security checks into the CI/CD pipeline and block risky images", "severity": "High" }
      ]
    }
  ]
}

