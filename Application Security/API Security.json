{
  "title": "API Security",
  "description": "Comprehensive API Security checklist based on industry best practices for designing, testing, and releasing secure APIs",
  "categories": [
    {
      "id": 1,
      "category": "Authentication",
      "description": "Authentication mechanisms and standards",
      "items": [
        { "id": "1.1", "item": "Don't use `Basic Auth`. Use standard authentication instead (e.g., JWT https://jwt.io/).", "severity": "High" },
        { "id": "1.2", "item": "Don't reinvent the wheel in `Authentication`, `token generation`, `password storage`. Use the standards.", "severity": "High" },
        { "id": "1.3", "item": "Use `Max Retry` and jail features in Login.", "severity": "Medium" },
        { "id": "1.4", "item": "Use encryption on all sensitive data.", "severity": "High" }
      ]
    },
    {
      "id": 2,
      "category": "JWT (JSON Web Token)",
      "description": "JWT implementation and security best practices",
      "items": [
        { "id": "2.1", "item": "Use a random complicated key (`JWT Secret`) to make brute forcing the token very hard.", "severity": "High" },
        { "id": "2.2", "item": "Don't extract the algorithm from the header. Force the algorithm in the backend (`HS256` or `RS256`).", "severity": "High" },
        { "id": "2.3", "item": "Make token expiration (`TTL`, `RTTL`) as short as possible.", "severity": "Medium" },
        { "id": "2.4", "item": "Don't store sensitive data in the JWT payload, it can be decoded easily (https://jwt.io/#debugger-io).", "severity": "High" },
        { "id": "2.5", "item": "Avoid storing too much data. JWT is usually shared in headers and they have a size limit.", "severity": "Medium" }
      ]
    },
    {
      "id": 3,
      "category": "Access",
      "description": "Access control and request limiting mechanisms",
      "items": [
        { "id": "3.1", "item": "Limit requests (Throttling) to avoid DDoS / brute-force attacks.", "severity": "High" },
        { "id": "3.2", "item": "Use HTTPS on server side with TLS 1.2+ and secure ciphers to avoid MITM (Man in the Middle Attack) and ensure `Host` header matches the SNI.", "severity": "High" },
        { "id": "3.3", "item": "Use `HSTS` header with SSL to avoid SSL Strip attacks.", "severity": "Medium" },
        { "id": "3.4", "item": "Turn off directory listings.", "severity": "Low" },
        { "id": "3.5", "item": "For private APIs, allow access only from safelisted IPs/hosts.", "severity": "Medium" }
      ]
    },
    {
      "id": 4,
      "category": "Authorization (OAuth)",
      "description": "OAuth implementation and authorization mechanisms",
      "items": [
        { "id": "4.1", "item": "Always validate `redirect_uri` server-side to allow only safelisted URLs.", "severity": "High" },
        { "id": "4.2", "item": "Always try to exchange for code and not tokens (don't allow `response_type=token`).", "severity": "High" },
        { "id": "4.3", "item": "Use `state` parameter with a random hash to prevent CSRF on the OAuth authorization process.", "severity": "High" },
        { "id": "4.4", "item": "Define the default scope, and validate scope parameters for each application.", "severity": "Medium" }
      ]
    },
    {
      "id": 5,
      "category": "Input",
      "description": "Input validation and data handling",
      "items": [
        { "id": "5.1", "item": "Use the proper HTTP method according to the operation: `GET (read)`, `POST (create)`, `PUT/PATCH (replace/update)`, and `DELETE (to delete a record)`, and respond with `405 Method Not Allowed` if the requested method isn't appropriate for the requested resource.", "severity": "Medium" },
        { "id": "5.2", "item": "Validate `content-type` on request Accept header (Content Negotiation) to allow only your supported format (e.g., `application/xml`, `application/json`, etc.) and respond with `406 Not Acceptable` response if not matched.", "severity": "Medium" },
        { "id": "5.3", "item": "Validate `content-type` of posted data as you accept (e.g., `application/x-www-form-urlencoded`, `multipart/form-data`, `application/json`, etc.).", "severity": "High" },
        { "id": "5.4", "item": "Validate user input to avoid common vulnerabilities (e.g., `XSS`, `SQL-Injection`, `Remote Code Execution`, etc.).", "severity": "High" },
        { "id": "5.5", "item": "Don't use any sensitive data (`credentials`, `Passwords`, `security tokens`, or `API keys`) in the URL, but use standard Authorization header.", "severity": "High" },
        { "id": "5.6", "item": "Use only server-side encryption.", "severity": "High" },
        { "id": "5.7", "item": "Use an API Gateway service to enable caching, Rate Limit policies (e.g., `Quota`, `Spike Arrest`, or `Concurrent Rate Limit`) and deploy APIs resources dynamically.", "severity": "Medium" }
      ]
    },
    {
      "id": 6,
      "category": "Processing",
      "description": "Secure processing and data handling",
      "items": [
        { "id": "6.1", "item": "Check if all the endpoints are protected behind authentication to avoid broken authentication process.", "severity": "High" },
        { "id": "6.2", "item": "User own resource ID should be avoided. Use `/me/orders` instead of `/user/654321/orders`.", "severity": "Medium" },
        { "id": "6.3", "item": "Don't auto-increment IDs. Use `UUID` instead.", "severity": "Medium" },
        { "id": "6.4", "item": "If you are parsing XML data, make sure entity parsing is not enabled to avoid `XXE` (XML external entity attack).", "severity": "High" },
        { "id": "6.5", "item": "If you are parsing XML, YAML or any other language with anchors and refs, make sure entity expansion is not enabled to avoid `Billion Laughs/XML bomb` via exponential entity expansion attack.", "severity": "High" },
        { "id": "6.6", "item": "Use a CDN for file uploads.", "severity": "Medium" },
        { "id": "6.7", "item": "If you are dealing with huge amount of data, use Workers and Queues to process as much as possible in background and return response fast to avoid HTTP Blocking.", "severity": "Low" },
        { "id": "6.8", "item": "Do not forget to turn the DEBUG mode OFF.", "severity": "High" },
        { "id": "6.9", "item": "Use non-executable stacks when available.", "severity": "Medium" }
      ]
    },
    {
      "id": 7,
      "category": "Output",
      "description": "Secure response headers and output handling",
      "items": [
        { "id": "7.1", "item": "Send `X-Content-Type-Options: nosniff` header.", "severity": "Medium" },
        { "id": "7.2", "item": "Send `X-Frame-Options: deny` header.", "severity": "Medium" },
        { "id": "7.3", "item": "Send `Content-Security-Policy: default-src 'none'` header.", "severity": "Medium" },
        { "id": "7.4", "item": "Remove fingerprinting headers - `X-Powered-By`, `Server`, `X-AspNet-Version`, etc.", "severity": "Low" },
        { "id": "7.5", "item": "Force `content-type` for your response. If you return `application/json`, then your `content-type` response is `application/json`.", "severity": "Low" },
        { "id": "7.6", "item": "Don't return sensitive data like `credentials`, `passwords`, or `security tokens`.", "severity": "High" },
        { "id": "7.7", "item": "Return the proper status code according to the operation completed. (e.g., `200 OK`, `400 Bad Request`, `401 Unauthorized`, `405 Method Not Allowed`, etc.).", "severity": "Low" }
      ]
    },
    {
      "id": 8,
      "category": "CI & CD",
      "description": "Continuous Integration and Deployment security practices",
      "items": [
        { "id": "8.1", "item": "Audit your design and implementation with unit/integration tests coverage.", "severity": "Medium" },
        { "id": "8.2", "item": "Use a code review process and disregard self-approval.", "severity": "High" },
        { "id": "8.3", "item": "Ensure that all components of your services are statically scanned by AV software before pushing to production, including vendor libraries and other dependencies.", "severity": "High" },
        { "id": "8.4", "item": "Continuously run security tests (static/dynamic analysis) on your code.", "severity": "High" },
        { "id": "8.5", "item": "Check your dependencies (both software and OS) for known vulnerabilities.", "severity": "High" },
        { "id": "8.6", "item": "Design a rollback solution for deployments.", "severity": "Medium" }
      ]
    },
    {
      "id": 9,
      "category": "Monitoring",
      "description": "Security monitoring and logging practices",
      "items": [
        { "id": "9.1", "item": "Use centralized logins for all services and components.", "severity": "Medium" },
        { "id": "9.2", "item": "Use agents to monitor all traffic, errors, requests, and responses.", "severity": "High" },
        { "id": "9.3", "item": "Use alerts for SMS, Slack, Email, Telegram, Kibana, Cloudwatch, etc.", "severity": "Medium" },
        { "id": "9.4", "item": "Ensure that you aren't logging any sensitive data like credit cards, passwords, PINs, etc.", "severity": "High" },
        { "id": "9.5", "item": "Use an IDS and/or IPS system to monitor your API requests and instances.", "severity": "High" }
      ]
    }
  ]
}
